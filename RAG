RAG = Retrieval-Augmented Generation

It‚Äôs an AI architecture pattern that improves Large Language Models (LLMs) by giving them access to 
external knowledge sources (like databases, documents, or APIs) during response generation.

--------------------------------------
Working Process :
1.User Query:
You ask the model a question.

2.Retrieval:
The system searches external sources (e.g., vector database, knowledge base, PDFs, APIs) to fetch relevant context.

3.Augmentation:
The retrieved context is fed into the LLM as extra input (prompt enrichment).

4.Generation:
The LLM uses both its training knowledge + retrieved context to generate a more accurate, up-to-date, and grounded answer.

---------------------------------------------
Hands ON Done-->

Improve the RAG accuracy and efficiency.
- Improve existing  the RAG system of Accuracy 45 % to 90 %

-- Improve the rag system.py scripts by below

-- Using chunking Stratergy - Semantic + Overlap 


-----------------------
# üìò Chunking Strategies in RAG

This document explains different **chunking strategies** used in **RAG (Retrieval-Augmented Generation)** with examples.  

---

## üìÑ Example Text
> "In Kubernetes, a Pod is the smallest deployable unit. Pods can host one or more containers that share storage and networking. Deployments help manage Pods by scaling them up or down. Services expose Pods to external traffic."

---

## 1. Fixed-size (e.g., 10 words each) ‚ùå
Chunk 1: "In Kubernetes, a Pod is the smallest deployable unit. Pods"
Chunk 2: "can host one or more containers that share storage and"
Chunk 3: "networking. Deployments help manage Pods by scaling them up"
Chunk 4: "or down. Services expose Pods to external traffic."

yaml
Copy code
- ‚ö†Ô∏è Cuts sentences awkwardly ‚Üí context lost.

---

## 2. Sentence-level ‚öñÔ∏è
Chunk 1: "In Kubernetes, a Pod is the smallest deployable unit."
Chunk 2: "Pods can host one or more containers that share storage and networking."
Chunk 3: "Deployments help manage Pods by scaling them up or down."
Chunk 4: "Services expose Pods to external traffic."

yaml
Copy code
- ‚úÖ Clear sentences  
- ‚ùå May miss multi-sentence context.

---

## 3. Semantic (Paragraph-based) ‚úÖ
Chunk 1: "In Kubernetes, a Pod is the smallest deployable unit.
Pods can host one or more containers that share storage and networking."
Chunk 2: "Deployments help manage Pods by scaling them up or down.
Services expose Pods to external traffic."

yaml
Copy code
- ‚úÖ Keeps related ideas together  
- ‚ùå Boundaries may still drop context.

---

## 4. Semantic + Overlap (Best) üèÜ
Chunk 1: "In Kubernetes, a Pod is the smallest deployable unit.
Pods can host one or more containers that share storage and networking."

Chunk 2: "Pods can host one or more containers that share storage and networking.
Deployments help manage Pods by scaling them up or down.
Services expose Pods to external traffic."

markdown
Copy code
- ‚úÖ Preserves **meaning**  
- ‚úÖ Ensures **no lost context** at boundaries  
- üöÄ Best retrieval accuracy in RAG

---

## üéØ Conclusion
The **Semantic + Overlap strategy** is typically the most effective for **improving retrieval accuracy in RAG systems**.  
It combines **natural context segmentation** with **redundancy at chunk edges**, 


-----------------------------------------------------------------------------------------------------------------------------------------------------------


